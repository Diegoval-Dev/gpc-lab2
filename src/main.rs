use minifb::{Key, Window, WindowOptions};
use std::time::Duration;
use std::thread;
use crate::framebuffer::Framebuffer;
use crate::color::Color;

mod framebuffer;
mod color;

const WIDTH: usize = 100;
const HEIGHT: usize = 100;

fn render(framebuffer: &mut Framebuffer, grid: &Vec<Vec<bool>>) {
    for y in 0..HEIGHT {
        for x in 0..WIDTH {
            if grid[y][x] {
                framebuffer.set_current_color(Color::new(255, 255, 255));
            } else {
                framebuffer.set_current_color(Color::new(0, 0, 0));
            }
            framebuffer.point(x as isize, y as isize);
        }
    }
}

fn count_neighbors(grid: &Vec<Vec<bool>>, x: usize, y: usize) -> usize {
    let mut count = 0;
    for dy in [-1, 0, 1].iter().cloned() {
        for dx in [-1, 0, 1].iter().cloned() {
            if dx == 0 && dy == 0 {
                continue;
            }
            let nx = (x as isize + dx).rem_euclid(WIDTH as isize) as usize;
            let ny = (y as isize + dy).rem_euclid(HEIGHT as isize) as usize;
            if grid[ny][nx] {
                count += 1;
            }
        }
    }
    count
}

fn update(grid: &mut Vec<Vec<bool>>) {
    let mut new_grid = grid.clone();
    for y in 0..HEIGHT {
        for x in 0..WIDTH {
            let neighbors = count_neighbors(grid, x, y);
            if grid[y][x] {
                if neighbors < 2 || neighbors > 3 {
                    new_grid[y][x] = false;
                }
            } else {
                if neighbors == 3 {
                    new_grid[y][x] = true;
                }
            }
        }
    }
    *grid = new_grid;
}

fn initialize_pattern(grid: &mut Vec<Vec<bool>>) {
    // Patrón "Gosper glider gun SUPER" 
    let pattern = vec![
      (1,2),(2,3),(2,4),(3,1),(3,5),(4,1),(4,5),(5,1),(5,5),(6,2),(6,3),(6,4),(7,3),(10,2),(10,3),(10,4),(11,2),(11,3),(11,4),(12,1),(12,5),(14,0),(14,1),(14,5),(14,6),(24,2),(24,3),(25,2),(25,3),(35,0),(35,1),(36,0),(36,1),
			(60,2),(60,3),(60,4),(61,2),(61,3),(61,4),(62,1),(62,5),(64,0),(64,1),(64,5),(64,6),(74,2),(74,3),(75,2),(75,3),(84,1),(84,5),(85,1),(85,5),(86,2),(86,3),(86,4),(87,3),(90,2),(90,3),(90,4),(91,2),(91,3),(91,4),(92,1),(92,5),
			(94,0),(94,1),(94,5),(94,6), (1,44),(2,55),(2,21),(3,75), (3,21),(3,55),(4,21),(4,55),(4,76),(4,75),(5,21),(5,55),(5,76),(5,75),(6,21),(6,55),(6,76),(6,75),(7,21),(7,55),(7,76),(7,75),(8,21),(8,55),(8,76),(8,75),(9,21),(9,55),
			(34,34),(33,33),
			(9,76),(9,75),(10,21),(10,55),(10,76),(10,75),(11,21),(11,55),(11,76),(11,75),(12,21),(12,55),(12,76),(12,75),(13,21),(13,55),(13,76),(13,75),(14,21),(14,55),(14,76),(14,75),(15,21),(15,55),(15,76),(15,75),(16,21),(16,55),(16,76),
			(66,66),(99,99),(23,45),(68,88),(53,84),(95,43),(34,55),(75,88),(33,33),(68,65),(66,67),(66,66),(67,67),(67,69),(67,68),(68,67),(68,68),(68,69),(69,66),(69,67),(69,68),(69,69),(70,67),(70,68),(70,69),(71,66),(71,67),(71,68),(71,69),
			(72,67),(72,68),(72,69),(73,66),(73,67),(73,68),(73,69),(74,67),(74,68),(74,69),(75,66),(75,67),(75,68),(75,69),(76,67),(76,68),(76,69),(77,66),(77,67),(77,68),(77,69),(78,67),(78,68),(78,69),(79,66),(79,67),(79,68),(79,69),(80,67),
			(80,68),(80,69),(81,66),(81,67),(81,68),(81,69),(82,67),(82,68),(82,69),(83,66),(83,67),(83,68),(83,69),(84,67),(84,68),(84,69),(85,66),(85,67),(85,68),(85,69),(86,67),(86,68),(86,69),(87,66),(87,67),(87,68),(87,69),(88,67),(88,68),
			(88,69),(89,66),(89,67),(89,68),(89,69),(90,67),(90,68),(90,69),(91,66),(91,67),(91,68),(91,69),(92,67),(92,68),(92,69),(93,66),(93,67),(93,68),(93,69),(94,67),(94,68),(94,69),(95,66),(95,67),(95,68),(95,69),(96,67),(96,68),(96,69),
			(97,66),(97,67),(97,68),(97,69),(98,67),(98,68),(98,69),(99,66),(99,67),(99,68),(99,69),(50,50),(50,51),(51,51),(52,52),(52,53),(53,52),(53,53),(54,52),(54,53),(55,52),(55,53),(56,52),(56,53),(57,52),(57,53),(58,52),(58,53),(59,52),
			(59,53),(60,52),(60,53),(61,52),(61,53),(62,52),(62,53),(63,52),(63,53),(64,52),(64,53),(65,52),(65,53),(66,52),(66,53),(67,52),(67,53),(68,52),(68,53),(69,52),(69,53),(70,52),(70,53),(71,52),(71,53),(72,52),(72,53),(73,52),(73,53),
			(74,52),(74,53),(75,52),(75,53),(76,52),(76,53),(77,52),(77,53),(78,52),(78,53),(79,52),(79,53),(80,52),(80,53),(81,52),(81,53),(82,52),(82,53),(83,52),(83,53),(84,52),(84,53),(85,52),(85,53),(86,52),(86,53),(87,52),(87,53),(88,52),
			(88,53),(89,52),(89,53),(90,52),(90,53),(91,52),(91,53),(92,52),(92,53),(93,52),(93,53),(94,52),(94,53),(95,52),(95,53),(96,52),(96,53),(97,52),(97,53),(98,52),(98,53),(99,52),(99,53),(50,52),(50,53),(51,52),(51,53),(52,50),(52,51),
			(53,50),(53,51),(54,50),(54,51),(55,50),(55,51),(56,50),(56,51),(57,50),(57,51),(58,50),(58,51),(59,50),(59,51),(60,50),(60,51),(61,50),(61,51),(62,50),(62,51),(63,50)
		];
		for &(x, y) in pattern.iter() {
			grid[y][x] = true;
		}
}

fn main() {
    let window_width = WIDTH * 8;
    let window_height = HEIGHT * 8;
    let frame_delay = Duration::from_millis(100); // Aproximadamente 10 FPS

    let mut framebuffer = Framebuffer::new(WIDTH, HEIGHT);
    let mut window = Window::new(
        "Conway's Game of Life",
        window_width,
        window_height,
        WindowOptions::default(),
    ).unwrap();

    let mut grid = vec![vec![false; WIDTH]; HEIGHT];

    // Inicializar el patrón
    initialize_pattern(&mut grid);

    while window.is_open() {
        // Listen to inputs
        if window.is_key_down(Key::Escape) {
            break;
        }

        // Render
        render(&mut framebuffer, &grid);

        // Update the window with the framebuffer contents
        window
            .update_with_buffer(framebuffer.get_buffer(), WIDTH, HEIGHT)
            .unwrap();

        // Update game state
        update(&mut grid);

        // Sleep to maintain a consistent framerate
        thread::sleep(frame_delay);
    }
}
